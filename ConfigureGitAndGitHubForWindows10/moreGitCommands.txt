Demonstrating usage of git clone
---------------------------------

Difference between git init and git clone:
Both these commands are used to initialize new repositories. But git clone first calls git init to create a new empty repository. 
It then copies the data from the existing repository, and checks out a new set of working files. 

indranid@N-CNU416B8WC MINGW32 ~/Documents/Repos
$ git clone https://github.com/indro8307/GitAndGitHub.git
Cloning into 'GitAndGitHub'...
remote: Enumerating objects: 18, done.
remote: Counting objects: 100% (18/18), done.
remote: Compressing objects: 100% (11/11), done.
remote: Total 18 (delta 4), reused 14 (delta 3), pack-reused 0
Unpacking objects: 100% (18/18), 4.78 KiB | 30.00 KiB/s, done.

The above command creates a local repository of the existing central repository hosted in GitHub, called 'GitAndGitHub'.
So basically it will create a directory by the name 'GitAndGitHub' in the local system. Apart from other files, it will also have 
a folder called .git containing metadata.



Parallel development with Git using branches
--------------------------------------------------

It is possible to create multiple local branches from the master branch using the command 'git branch <branch name>'. Changes made in the local branches wont be reflected in the master branch unless they are merged. The command 'git branch' is also used to list all the branches created, with the current branch being indicated by a '*' character.


indranid@N-CNU416B8WC MINGW32 ~/Documents/Repos/GitAndGitHub (master)
$ git branch devbranch

indranid@N-CNU416B8WC MINGW32 ~/Documents/Repos/GitAndGitHub (master)
$ git branch
  devbranch
* master

The command 'git checkout <branch name>' is used to switch to another branch.

indranid@N-CNU416B8WC MINGW32 ~/Documents/Repos/GitAndGitHub (master)
$ git checkout devbranch
Switched to branch 'devbranch'
M       ConfigureGitAndGitHubForWindows10/moreGitCommands.txt


The command 'git rebase <branch name>' is used to fetch all changes made in the master branch to the local branch. This syncs the local branch
with the master branch.

indranid@N-CNU416B8WC MINGW32 ~/Documents/Repos/GitAndGitHub/ConfigureGitAndGitHubForWindows10 (master)
$ git checkout devbranch
Switched to branch 'devbranch'

indranid@N-CNU416B8WC MINGW32 ~/Documents/Repos/GitAndGitHub/ConfigureGitAndGitHubForWindows10 (devbranch)
$ git rebase master
First, rewinding head to replay your work on top of it...
Fast-forwarded devbranch to master.



Merging changes made in the local branch to the master branch
------------------------------------------------------------------

If we develop a new feature in a local branch and we want to have that feature in the master branch as well, then we need to perform 
the merge operation. For this, you have to switch to the master branch and execute the following command:
git merge <local branch name>

indranid@N-CNU416B8WC MINGW32 ~/Documents/Repos/GitAndGitHub/ConfigureGitAndGitHubForWindows10 (devbranch)
$ git checkout master
Switched to branch 'master'
Your branch is up to date with 'origin/master'.

indranid@N-CNU416B8WC MINGW32 ~/Documents/Repos/GitAndGitHub/ConfigureGitAndGitHubForWindows10 (master)
$ git merge devbranch
Updating d656de7..debea4b
Fast-forward
 .../moreGitCommands.txt                            | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)




Reverting back to a previous commit:
--------------------------------------

If you want to go back to a particular commit, use the 'git revert' command followed by a 'git push origin master'.

git revert <hash of commit>  (The hash should be of the commit you want to remove)

indranid@N-CNU416B8WC MINGW32 ~/Documents/Repos/GitAndGitHub/ConfigureGitAndGitHubForWindows10 (master)
$ git revert 36c765970eaf24827a8c3880778d2cb26adeb00a
[master 6d19701] Revert "updating moreGitCommands.txt with info on git diff and git log"
 Committer: Das <indranil.das@nokia.com>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly. Run the
following command and follow the instructions in your editor to edit
your configuration file:

    git config --global --edit

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 1 file changed, 107 deletions(-)

indranid@N-CNU416B8WC MINGW32 ~/Documents/Repos/GitAndGitHub/ConfigureGitAndGitHubForWindows10 (master)
$ git status
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean

indranid@N-CNU416B8WC MINGW32 ~/Documents/Repos/GitAndGitHub/ConfigureGitAndGitHubForWindows10 (master)
$ git push origin master
Enumerating objects: 7, done.
Counting objects: 100% (7/7), done.
Delta compression using up to 4 threads
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 438 bytes | 109.00 KiB/s, done.
Total 4 (delta 2), reused 0 (delta 0)
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To https://github.com/indro8307/GitAndGitHub.git
   36c7659..6d19701  master -> master


For more details:
https://stackoverflow.com/questions/4114095/how-do-i-revert-a-git-repository-to-a-previous-commit
